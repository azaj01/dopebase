// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users
model User {
  id    String  @id @default(uuid())
  email String? @unique

  firstName   String? @map("first_name")
  lastName    String? @map("last_name")
  displayName String? @map("display_name")

  profilePictureURL String? @map("profile_picture_url")
  role              String?
  phone             String?
  metadata          String? @map("metadata")

  username       String? @unique
  bioTitle       String? @map("bio_title")
  bioDescription String? @map("bio_description")
  websiteURL     String? @map("website_url")
  banned         Boolean @default(false)
  banned_at      String? @map("banned_at")

  createdAt String? @map("created_at")
  updatedAt String? @map("updated_at")

  articles       Article[]
  Auth           Auth?
  subscriptions  Subscription[]
  paymentMethods PaymentMethod[]
  taxiTrips      TaxiTrip[]
  taxiUsers      TaxiUser[]

  @@map("users")
}

// Auth
model Auth {
  id                String  @id @default(uuid())
  createdAt         String? @map("created_at")
  updatedAt         String? @map("updated_at")
  expiresAt         String? @map("expires_at")
  userId            String? @unique @map("user_id")
  user              User?   @relation(fields: [userId], references: [id])
  encryptedPassword String? @map("encrypted_password")
  providerType      String? @map("provider_type")
  providerId        String? @map("provider_id")
  providerData      String? @map("provider_data")
  resetToken        String? @map("reset_token")
  accessToken       String? @map("access_token")
  Login             Login[]

  @@map("auth")
}

model Login {
  id             String  @id @default(uuid())
  token          String?
  authId         String?
  auth           Auth?   @relation(fields: [authId], references: [id])
  createdAt      String? @map("created_at")
  clientIp       String? @map("client_ip")
  userAgent      String? @map("user_agent")
  country        String?
  region         String?
  city           String?
  latitude       String?
  longitude      String?
  clientMetadata String? @map("client_metadata")

  @@map("logins")
}

// Articles

model Article {
  id           String  @id @default(uuid())
  title        String?
  content      String?
  coverPhoto   String? @map("cover_photo")
  canonicalURL String? @map("canonical_url")

  published Boolean @default(false)

  slug           String? @unique
  seoKeyword     String? @map("seo_keyword")
  seoTitle       String? @map("seo_title")
  seoDescription String? @map("seo_description")
  authorId       String? @map("author_id")
  author         User?   @relation(fields: [authorId], references: [id])
  createdAt      String? @map("created_at")
  updatedAt      String? @map("updated_at")

  categoryId String?          @map("category_id")
  category   ArticleCategory? @relation(fields: [categoryId], references: [id])

  tags ArticleTag[]

  // AI fields
  aiContent        String? @map("ai_content")
  aiSections       String? @map("ai_sections")
  aiSeoDescription String? @map("ai_seo_description")
  aiSummary        String? @map("ai_summary")
  aiPrompt         String? @map("ai_prompt")
  aiTags           String? @map("ai_tags")
  aiSocialPost     String? @map("ai_social_post")
  aiGenerated      Boolean @default(false) @map("ai_generated")

  @@map("articles")
}

model ArticleIdea {
  id              String  @id @default(uuid())
  title           String? @map("title")
  sections        String? @map("sections")
  tags            String? @map("tags")
  status          String? @map("status")
  extraPrompt     String? @map("extra_prompt")
  slug            String? @map("slug")
  socialMediaPost String? @map("social_media_post")
  seoDescription  String? @map("seo_description")
  summary         String? @map("summary")
  topic           String? @map("topic")
  category        String? @map("category")
  createdAt       String? @map("created_at")
  updatedAt       String? @map("updated_at")

  @@map("article_ideas")
}

model ArticleTag {
  id             String  @id @default(uuid())
  name           String?
  slug           String? @unique
  description    String?
  published      Boolean @default(true)
  seoTitle       String? @map("seo_title")
  seoDescription String? @map("seo_description")
  imageURL       String? @map("image_url")
  canonicalURL   String? @map("canonical_url")
  createdAt      String? @map("created_at")
  updatedAt      String? @map("updated_at")

  products Article[]

  // AI fields
  aiSummary         String? @map("ai_summary")
  aiSeoDescription  String? @map("ai_seo_description")
  aiLongDescription String? @map("ai_long_description")
  aiSocialPost      String? @map("ai_social_post")
  aiPrompt          String? @map("ai_prompt")
  aiGenerated       Boolean @default(false) @map("ai_generated")

  @@map("article_tags")
}

model ArticleCategory {
  id             String  @id @default(uuid())
  name           String?
  description    String?
  slug           String? @unique
  imageURL       String? @map("image_url")
  published      Boolean @default(false)
  createdAt      String? @map("created_at")
  updatedAt      String? @map("updated_at")
  parentId       String? @map("parent_id")
  seoTitle       String? @map("seo_title")
  seoDescription String? @map("seo_description")
  seoImageURL    String? @map("seo_image_url")
  canonicalURL   String? @map("canonical_url")

  parent          ArticleCategory?  @relation("ArticleCategoryToArticleCategory", fields: [parentId], references: [id])
  ArticleCategory ArticleCategory[] @relation("ArticleCategoryToArticleCategory")

  Article Article[]

  // AI fields
  aiSummary         String? @map("ai_summary")
  aiSeoDescription  String? @map("ai_seo_description")
  aiLongDescription String? @map("ai_long_description")
  aiSocialPost      String? @map("ai_social_post")
  aiPrompt          String? @map("ai_prompt")
  aiGenerated       Boolean @default(false) @map("ai_generated")

  @@map("article_categories")
}

// Subscriptions

model Subscription {
  id                String    @id @default(uuid())
  user_id           String
  plan_id           String
  start_date        DateTime
  end_date          DateTime?
  status            String
  last_payment_date DateTime?
  next_billing_date DateTime?
  created_at        DateTime
  updated_at        DateTime

  user        User             @relation(fields: [user_id], references: [id])
  plan        SubscriptionPlan @relation(fields: [plan_id], references: [id])
  Transaction Transaction[]

  @@map("subscriptions")
}

model SubscriptionPlan {
  id                   String  @id @default(uuid())
  name                 String
  basic_description    String?
  detailed_description String?
  price                String
  stripe_price_id      String?
  billing_cycle        String
  created_at           String
  updated_at           String

  subscriptions Subscription[]

  @@map("subscription_plans")
}

model PaymentMethod {
  id               String  @id @default(uuid())
  provider         String
  details          String
  is_default       Boolean
  stripeCustomerID String?
  brand            String?
  last4            String?
  expiryMonth      String?
  expiryYear       String?
  userID           String?

  user User? @relation(fields: [userID], references: [id])

  @@map("payment_methods")
}

model Transaction {
  id                      String  @id @default(uuid())
  subscription_id         String
  amount                  String
  transaction_date        String?
  status                  String
  provider_transaction_id String?
  created_at              String?
  updated_at              String?

  subscription Subscription @relation(fields: [subscription_id], references: [id])

  @@map("transactions")
}

// Taxi
model TaxiTrip {
  id          String  @id @default(uuid())
  pickup      String?
  dropoff     String?
  status      String?
  passengerID String? @map("passenger_id")
  carType     String? @map("car_type")
  priceRange  String? @map("price_range")
  ride        String?
  carDrive    String? @map("car_drive")
  createdAt   String  @map("created_at")
  updatedAt   String  @map("updated_at")

  passenger       User?            @relation(fields: [passengerID], references: [id])
  taxiCarCategory TaxiCarCategory? @relation(fields: [carType], references: [id])

  @@map("taxi_trips")
}

model TaxiCarCategory {
  id                 String  @id @default(uuid())
  name               String?
  description        String?
  photo              String?
  marker             String?
  baseFare           String? @map("base_fare")
  costPerKm          String? @map("cost_per_km")
  costPerMin         String? @map("cost_per_min")
  minimumFare        String? @map("minimum_fare")
  numberOfPassengers String? @map("number_of_passengers")
  averageSpeedPerMin String? @map("average_speed_per_min")
  createdAt          String  @map("created_at")
  updatedAt          String  @map("updated_at")

  taxiTrips TaxiTrip[]

  @@map("taxi_car_categories")
}

model TaxiUser {
  id                String  @id @default(uuid())
  user              User    @relation(fields: [id], references: [id])
  licensePictureURL String? @map("license_picture_url")
  carPictureURL     String? @map("car_picture_url")
  carName           String? @map("car_name")
  carNumber         String? @map("car_number")
  carType           String? @map("car_type")
  inProgressOrderID String? @map("created_at")

  @@map("taxi_users")
}

// Website Settings
model Settings {
  id        String  @id @default(uuid())
  name      String? @unique
  value     String?
  createdAt String? @map("created_at")
  updatedAt String? @map("updated_at")

  @@map("settings")
}

// Plugins
model Plugin {
  id        String  @id @default(uuid())
  name      String? @unique
  installed Boolean
  createdAt String? @map("created_at")
  updatedAt String? @map("updated_at")

  @@map("plugins")
}
